{"version":3,"sources":["components/MastermindRow/MastermindRow.js","components/ColorBall/ColorBall.js","components/Inventory/Inventory.js","components/MastermindBoard/MastermindBoard.js","App.js","reportWebVitals.js","index.js"],"names":["MastermindRow","props","classList","isActive","currentValues","Cells","filledCellCount","i","styleObject","backgroundColor","push","className","style","onClick","index","updateCellValue","length","Controls","evaluateCallback","EvaluationCells","blacksLeft","blackCount","whitesLeft","whiteCount","classSuffix","evaluationClassList","ColorBall","color","isSelected","clickHandler","Inventory","selectColor","newColor","setActiveColor","colorBalls","colors","map","selectedColor","newGamePressed","COLORS","generateSecret","Math","floor","random","initialGuessList","initialSecret","MastermindBoard","React","useState","activeColor","secret","setSecret","guessList","setGuessList","getActiveRowIndex","columnIndex","rowIndex","newState","row","updatedGuessList","getBlackCount","getWhiteCount","alert","rows","Array","fill","_","guess","blacks","comboToMap","combo","guessMap","secretMap","min","blackOrWhiteCount","key","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ffb42fbb.chunk.js","sourcesContent":["import React from 'react';\r\nimport './MastermindRow.css';\r\n\r\nexport default function MastermindRow(props) {\r\n  const classList = props.isActive ? 'row active' : 'row';\r\n\r\n  const handleClick = index => {\r\n    if (props.isActive) {\r\n      props.updateCellValue(index);\r\n    }\r\n  };\r\n\r\n  const currentValues = props.currentValues ?? [];\r\n  const Cells = [];\r\n  let filledCellCount = 0;\r\n  for (let i = 0; i < 4; i += 1) {\r\n    const styleObject = { backgroundColor: currentValues[i] };\r\n    Cells.push(\r\n      <span\r\n        key={i}\r\n        className='cell'\r\n        style={styleObject}\r\n        onClick={() => handleClick(i)}\r\n      ></span>\r\n    );\r\n\r\n    if (currentValues[i]?.length > 0) {\r\n      filledCellCount += 1;\r\n    }\r\n  }\r\n\r\n  const Controls =\r\n    props.isActive && filledCellCount === 4 ? (\r\n      <button className='evaluate-button' onClick={props.evaluateCallback}>\r\n        Evaluate\r\n      </button>\r\n    ) : (\r\n      ''\r\n    );\r\n\r\n  const EvaluationCells = [];\r\n  var blacksLeft = props.blackCount ?? 0;\r\n  var whitesLeft = props.whiteCount ?? 0;\r\n  for (let i = 0; i < 4; i += 1) {\r\n    let classSuffix = '';\r\n    if (blacksLeft > 0) {\r\n      blacksLeft -= 1;\r\n      classSuffix = 'black';\r\n    } else if (whitesLeft > 0) {\r\n      whitesLeft -= 1;\r\n      classSuffix = 'white';\r\n    }\r\n    const evaluationClassList = `evaluation-cell ${classSuffix}`;\r\n    EvaluationCells.push(<span className={evaluationClassList} key={i}></span>);\r\n  }\r\n\r\n  return (\r\n    <div className={classList}>\r\n      <div className='input-cells'>{Cells}</div>\r\n      <div className='control-cells'>{Controls}</div>\r\n      <div className='evaluation-cells'>{EvaluationCells}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './ColorBall.css';\r\n\r\nexport default function ColorBall(props) {\r\n  const styleObject = { backgroundColor: props.color };\r\n  const classList = `color-ball${props.isSelected ? ' selected' : ''}`;\r\n  return (\r\n    <div\r\n      className={classList}\r\n      style={styleObject}\r\n      onClick={() => props.clickHandler(props.color)}\r\n    ></div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ColorBall from '../ColorBall/ColorBall';\r\nimport './Inventory.css';\r\n\r\nexport default function Inventory(props) {\r\n  const selectColor = newColor => {\r\n    props.setActiveColor(newColor);\r\n  };\r\n  const colorBalls = props.colors.map((color, index) => (\r\n    <ColorBall\r\n      color={color}\r\n      isSelected={color === props.selectedColor}\r\n      clickHandler={selectColor}\r\n      key={index}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      <button className='new-game-button' onClick={props.newGamePressed}>\r\n        New Game\r\n      </button>\r\n      <div className='color-balls-container'>{colorBalls}</div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport MastermindRow from '../MastermindRow/MastermindRow';\r\nimport Inventory from '../Inventory/Inventory';\r\n\r\nconst COLORS = [\r\n  'darkred',\r\n  'orange',\r\n  'gold',\r\n  'limegreen',\r\n  'green',\r\n  'darkturquoise',\r\n  'lightskyblue',\r\n  'dodgerblue',\r\n  'purple',\r\n  'violet',\r\n];\r\n\r\nconst MAX_ATTEMPTS = 10;\r\n\r\n// Function: generate the winning combination randomly\r\n\r\nfunction generateSecret(colors) {\r\n  return [\r\n    colors[Math.floor(Math.random() * colors.length)],\r\n    colors[Math.floor(Math.random() * colors.length)],\r\n    colors[Math.floor(Math.random() * colors.length)],\r\n    colors[Math.floor(Math.random() * colors.length)],\r\n  ];\r\n}\r\n\r\nconst initialGuessList = [\r\n  {\r\n    colors: [null, null, null, null],\r\n    blackCount: 0,\r\n    whiteCount: 0,\r\n  },\r\n];\r\n\r\nconst initialSecret = generateSecret(COLORS);\r\n\r\nexport default function MastermindBoard() {\r\n  const [activeColor, setActiveColor] = React.useState(null);\r\n  const [secret, setSecret] = React.useState(initialSecret);\r\n  const [guessList, setGuessList] = React.useState(initialGuessList);\r\n\r\n  const getActiveRowIndex = () => {\r\n    return guessList.length - 1;\r\n  };\r\n\r\n  const updateCellValue = columnIndex => {\r\n    const rowIndex = getActiveRowIndex();\r\n    const colors = [...guessList[rowIndex].colors];\r\n    colors[columnIndex] = activeColor;\r\n\r\n    const newState = guessList.map((row, i) =>\r\n      i === rowIndex\r\n        ? {\r\n            colors: colors,\r\n            blackCount: guessList[rowIndex].blackCount,\r\n            whiteCount: guessList[rowIndex].whiteCount,\r\n          }\r\n        : row\r\n    );\r\n\r\n    setGuessList(newState);\r\n  };\r\n\r\n  const evaluateCallback = () => {\r\n    const rowIndex = getActiveRowIndex();\r\n\r\n    const updatedGuessList = [...guessList];\r\n    const blackCount = getBlackCount();\r\n    updatedGuessList[rowIndex].blackCount = blackCount;\r\n    updatedGuessList[rowIndex].whiteCount = getWhiteCount(blackCount);\r\n\r\n    if (blackCount < 4) {\r\n      updatedGuessList.push({\r\n        colors: [null, null, null, null],\r\n        blackCount: 0,\r\n        whiteCount: 0,\r\n      });\r\n    }\r\n\r\n    if (blackCount < 4 && rowIndex + 1 === MAX_ATTEMPTS) {\r\n      alert('Game Over!');\r\n    }\r\n\r\n    setGuessList(updatedGuessList);\r\n  };\r\n\r\n  const newGamePressed = () => {\r\n    setGuessList(initialGuessList);\r\n    setSecret(generateSecret(COLORS));\r\n  };\r\n\r\n  const rows = new Array(MAX_ATTEMPTS)\r\n    .fill(null)\r\n    .map((_, index) => (\r\n      <MastermindRow\r\n        key={index}\r\n        isActive={\r\n          index === getActiveRowIndex() && guessList[index]?.blackCount < 4\r\n        }\r\n        updateCellValue={updateCellValue}\r\n        evaluateCallback={evaluateCallback}\r\n        blackCount={guessList[index]?.blackCount}\r\n        whiteCount={guessList[index]?.whiteCount}\r\n        currentValues={guessList[index]?.colors}\r\n      />\r\n    ));\r\n\r\n  const getBlackCount = () => {\r\n    const guess = guessList[getActiveRowIndex()].colors;\r\n    var blacks = 0;\r\n\r\n    for (let i = 0; i < guess.length; i += 1) {\r\n      if (guess[i] === secret[i]) {\r\n        blacks += 1;\r\n      }\r\n    }\r\n\r\n    return blacks;\r\n  };\r\n\r\n  const getWhiteCount = blackCount => {\r\n    function comboToMap(combo) {\r\n      var map = {};\r\n      for (let color of combo) {\r\n        map[color] = (map[color] ?? 0) + 1;\r\n      }\r\n      return map;\r\n    }\r\n\r\n    const guess = guessList[getActiveRowIndex()].colors;\r\n\r\n    const guessMap = comboToMap(guess);\r\n    const secretMap = comboToMap(secret);\r\n    const min = Math.min;\r\n\r\n    let blackOrWhiteCount = 0;\r\n    for (let key in guessMap) {\r\n      blackOrWhiteCount += min(guessMap[key], secretMap[key] ?? 0);\r\n    }\r\n\r\n    return blackOrWhiteCount - blackCount;\r\n  };\r\n\r\n  const getWinningMessage = () => {\r\n    if (guessList[getActiveRowIndex()].blackCount === 4) {\r\n      return <h2>Congratulations! You have won the game!</h2>;\r\n    }\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Inventory\r\n        colors={COLORS}\r\n        newGamePressed={newGamePressed}\r\n        setActiveColor={setActiveColor}\r\n        selectedColor={activeColor}\r\n      />\r\n      {getWinningMessage()}\r\n      {rows}\r\n    </>\r\n  );\r\n}\r\n","import './App.css';\nimport MastermindBoard from './components/MastermindBoard/MastermindBoard';\n\nexport default function App() {\n  return (\n    <div className='App'>\n      <h1>Can you guess the secret combination?</h1>\n      <MastermindBoard />\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}